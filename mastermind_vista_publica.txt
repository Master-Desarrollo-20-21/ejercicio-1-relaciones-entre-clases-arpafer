@startuml

class Mastermind {
   + play()
   
}

Mastermind *--> "10" Attempt

Mastermind *--> SecretCombination
Mastermind ..> Message
Mastermind ..> RespondYesNo

RespondYesNo ..> GestorIO
class RespondYesNo {
   +boolean read()
}

abstract class Combination {
   - String combination
   show();
   getCombination()
   addColor(String color)
   readInput()
}
class SecretCombination {
   - string[] colors
   + generate()
   + show()
   + get(): String
   + showResult(proposedCombination)
   + match(proposedCombination): boolean
}

SecretCombination ..> Message
Combination ..> GestorIO

class ProposedCombination {
   + read(): boolean
   + show()
   + toString()
   + valid()
}

ProposedCombination ..> GestorIO
ProposedCombination ..> Message
SecretCombination ..> ProposedCombination

Combination <|-- SecretCombination
Combination <|-- ProposedCombination

class Attempt {
   -index
   -secretCombination
   -proposedCombination
   + Attempt(index, secretCombination)
   + play()
   + winner(): boolean
   + showHead()
   + showResult()
}

Attempt *--> ProposedCombination
Attempt --> SecretCombination
Attempt ..> Message

enum Message {
   - message;
   +MAIN_TITLE("----- M A S T E R M I N D -----\n\n"),
   +WON("won!!!"),
   +LOST("lost. The combination is "),
   +RESULT("You've "),
   +RESUME("¿RESUME? S/n"),
   +ATTEMP("Attempt(s)"),
   +PROPOSE("Propose a combination: "),
   +WRONG_LENGTH("Wrong proposed combination length"),
   +WRONG_COLORS("Wrong colors, they must be: rbygop"),
   +VALID_COLORS("rbygop"),
   +HIDDEN_VIEW("xxxx"),
   +EXCLAMATION(" !!!")
   
   +write()
   +writeln()
   +toString()
}

Message ..> GestorIO

@enduml